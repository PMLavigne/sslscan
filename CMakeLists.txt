CMAKE_MINIMUM_REQUIRED(VERSION 3.0 FATAL_ERROR)

#
# Project Config
#
PROJECT(sslscan)

SET(APPLICATION_NAME "${PROJECT_NAME}")
SET(APPLICATION_CODENAME "${PROJECT_NAME}")
SET(APPLICATION_VERSION_MAJOR 0)
SET(APPLICATION_VERSION_MINOR 0)
SET(APPLICATION_VERSION_PATCH 1)
SET(APPLICATION_VERSION_BUILD -SNAPSHOT)

SET(WARNINGS "-Wall -Wformat=2")
SET(OPTIMIZATION "-O3")
SET(OTHER_FLAGS "-m64")

#
# OpenSSL Config
#
SET(OPENSSL_BRANCH "OpenSSL_1_0_2-stable")
SET(OPENSSL_DIR "${PROJECT_SOURCE_DIR}/openssl/")
SET(OPENSSL_CONFIG_SCRIPT "./config")
SET(OPENSSL_CONFIG_OPTIONS no-shared enable-md2 enable-ssl2 enable-ssl3 enable-rc5)
SET(OPENSSL_REPO_URL "https://github.com/openssl/openssl")


#
# Debugging
#
SET(CMAKE_VERBOSE_MAKEFILE 0)

#
# Project Output
#
SET(MAINFOLDER ${PROJECT_SOURCE_DIR})
SET(EXECUTABLE_OUTPUT_PATH "${MAINFOLDER}/bin")

#
# Commands
#
SET(GIT git)
SET(SED gsed)
SET(MAKE make)

#
# Version Number
#
EXECUTE_PROCESS(COMMAND ${GIT} describe --tags --always --dirty=-wip OUTPUT_VARIABLE VERSION_RAW)
IF("${VERSION_RAW}" MATCHES "^([0-9]+)[.]([0-9]+)[.]([0-9]+)([^\n\r]*)")
    SET(APPLICATION_VERSION_MAJOR ${CMAKE_MATCH_1})
    SET(APPLICATION_VERSION_MINOR ${CMAKE_MATCH_2})
    SET(APPLICATION_VERSION_PATCH ${CMAKE_MATCH_3})
    SET(APPLICATION_VERSION_BUILD ${CMAKE_MATCH_4})
ENDIF()
SET(APPLICATION_VERSION_STRING "${APPLICATION_VERSION_MAJOR}.${APPLICATION_VERSION_MINOR}.${APPLICATION_VERSION_PATCH}${APPLICATION_VERSION_BUILD}-static")
MESSAGE("Version string set to ${APPLICATION_VERSION_STRING}")

#
# Get Dependences
#
IF(EXISTS "${OPENSSL_DIR}/.git" AND IS_DIRECTORY "${OPENSSL_DIR}/.git")
    EXECUTE_PROCESS(COMMAND git clean -fx WORKING_DIRECTORY "${OPENSSL_DIR}")
ELSE()
    EXECUTE_PROCESS(COMMAND git clone "${OPENSSL_REPO_URL}" "${OPENSSL_DIR}")
ENDIF()

EXECUTE_PROCESS(COMMAND git checkout "${OPENSSL_BRANCH}" WORKING_DIRECTORY "${OPENSSL_DIR}")
EXECUTE_PROCESS(COMMAND git pull WORKING_DIRECTORY "${OPENSSL_DIR}")

#
# Pre-Configure OpenSSL
#
IF("${CMAKE_SIZEOF_VOID_P}" EQUAL "8")
    SET(OPENSSL_CONFIG_OPTIONS ${OPENSSL_CONFIG_OPTIONS} enable-ec_nistp_64_gcc_128)
    IF(APPLE)
        # It can't detect Darwin x64 itself, for some reason...
        SET(OPENSSL_CONFIG_SCRIPT "./Configure")
        SET(OPENSSL_CONFIG_OPTIONS darwin64-x86_64-cc ${OPENSSL_CONFIG_OPTIONS})
    ENDIF()
ENDIF()

#
# Configure OpenSSL
#
EXECUTE_PROCESS(COMMAND "${OPENSSL_CONFIG_SCRIPT}" ${OPENSSL_CONFIG_OPTIONS} WORKING_DIRECTORY "${OPENSSL_DIR}")

#
# Detect CPU's - Concept from http://www.kitware.com/blog/home/post/63
#
IF(NOT DEFINED PROCESSOR_COUNT)
    SET(PROCESSOR_COUNT 0)

    IF(APPLE)
        FIND_PROGRAM(CMD_SYSTEM_PROFILER "system_profiler")
        IF(CMD_SYSTEM_PROFILER)
            EXECUTE_PROCESS(COMMAND "${CMD_SYSTEM_PROFILER}" SPHardwareDataType OUTPUT_VARIABLE PROFILER_OUTPUT)
            STRING(REGEX REPLACE "^.*Total Number of Cores: ([0-9]+).*$" "\\1" PROCESSOR_COUNT "${PROFILER_OUTPUT}")
        ENDIF()
    ENDIF()

    IF(WIN32)
        SET(PROCESSOR_COUNT "$ENV{NUMBER_OF_PROCESSORS}")
    ENDIF()

    SET(CPUINFO "/proc/cpuinfo")
    IF(EXISTS "${CPUINFO}")
        FILE(STRINGS "${CPUINFO}" PROC_MATCHES REGEX "^processor.: [0-9]+$")
        LIST(LENGTH PROC_MATCHES PROCESSOR_COUNT)
    ENDIF()
ENDIF()

IF(PROCESSOR_COUNT)
    SET(MAKE "${MAKE}" -j${PROCESSOR_COUNT})
ENDIF()

#
# Define OpenSSL Build
#
ADD_CUSTOM_TARGET(openssl
                  COMMAND ${MAKE} depend
                  COMMAND ${MAKE}
                  WORKING_DIRECTORY "${OPENSSL_DIR}"
                  COMMENT "Building OpenSSL...")

#
# Define Executable
#

INCLUDE_DIRECTORIES("${OPENSSL_DIR}/include")

ADD_EXECUTABLE("${PROJECT_NAME}" sslscan.c)
ADD_DEPENDENCIES("${PROJECT_NAME}" openssl)
ADD_DEFINITIONS(${WARNINGS} ${OPTIMIZATION} ${OTHER_FLAGS} -DVERSION=\"${APPLICATION_VERSION_STRING}\")

TARGET_LINK_LIBRARIES("${PROJECT_NAME}" "${OPENSSL_DIR}/libcrypto.a" "${OPENSSL_DIR}/libssl.a")
